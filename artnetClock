#!/usr/bin/env python3

import socket
import time
import subprocess, shlex
import os
import urllib.request
from importlib import util

#pip3 install paho-mqtt
import paho.mqtt.client as mqtt
import random

#check if pygame is available/installed
if util.find_spec('pygame'):
    import pygame
    from pygame.locals import *
    mode = "pygame"
else:
    mode = "artnet"

class Artnet:
        def __init__(self, ip='candymachine.tkkrlab', port=6454):
                self.sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
                self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
                self.sock.connect((ip, port))

        def transmit(self, data):
                if self.sock is None:
                        return False
                try:
                        message = []
                        message.extend(bytearray("Art-Net", "ascii"))
                        message.append(0x00)
                        message.append(0x00) #opDmx
                        message.append(0x50) #opDmx
                        message.append(0x00) #protverhi
                        message.append(0x00)
                        message.append(0x00)
                        message.append(0x00)
                        message.append(0x00)
                        message.append(0x00)
                        message.append(0x00)
                        message.append(0x00)
                        message.extend(data)
                        self.sock.sendall(bytearray(message))
                        return True
                except:
                        return False

        def receive(self):
                if self.sock is None:
                        return False
                try:
                        data = self.sock.recv(10240)
                except:
                        #print("no data")
                        return False
                if len(data) < 20:
                        print("Length < 20")
                        return False
                if data[0:7].decode('ascii') != "Art-Net" or data[7] != 0:
                        print("Not artnet data")
                        return False
                if data[8] != 0x00 or data[9] != 0x50:
                        print("Not opDmx")
                        return False
                protverhi = data[10]
                protverlo = data[11]
                sequence  = data[12]
                physical  = data[13]
                subuni    = data[14]
                net       = data[15]
                lengthhi  = data[16]
                length    = data[17]
                dmx = data[18:]
                #print(length,dmx)
                #return (protverhi,protverlo,sequence,physical,subuni,net,lengthhi,length,dmx)
                return dmx

#define callback
def on_message(client, userdata, message):
    global color_werkplaats
    print("received message =",str(message.payload.decode("utf-8")))

    if message.payload.decode("utf-8") == '1':
        color_werkplaats = (0,255,0)
        print("werkplaats is OPEN")
    if message.payload.decode("utf-8") == '0':
        color_werkplaats = (255,0,0)
        print("werkplaats is CLOSED")

numbers={
'1': [
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
'2': [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [1,0,0],
        [1,1,1]
    ],
'3':  [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
'4':   [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [0,0,1]
    ],
'5':   [
        [1,1,1],
        [1,0,0],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
'6':   [
        [1,1,1],
        [1,0,0],
        [1,1,1],
        [1,0,1],
        [1,1,1]
    ],
'7':   [
        [1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
'8':   [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [1,0,1],
        [1,1,1]
    ],
'9':   [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
'0':   [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],

':':   [
        [0,0,0],
        [0,1,0],
        [0,0,0],
        [0,1,0],
        [0,0,0]
    ]
}

def p_set(x, y, r, g, b):
	global p_buffer
	if (x>16) or (x<0) or (y>9) or (y<0):
		return False	
	x = 16 - x
	corr = 0
	if (x % 2):
		corr = 9 - y*2
		#print("CORR", corr)
	y = 9 - y
	pos = (x*10+y-corr)*3
	p_buffer[pos+0] = r
	p_buffer[pos+1] = g
	p_buffer[pos+2] = b
	return True 

def send():
	global p_buffer
	if not (p_artnet.transmit(p_buffer)):
		print("Error P")

#------------------
def drawNumber(offsetx, offsety, character,color_pixel=(0,158,0)):
    nul = numbers[character]
    for y in range(0,len(nul)):
        rij = nul[y]
        for x in range(0, len(rij) ):
            if mode == "pygame":
                if rij[x] == 1:
                    pixel(screen,color_pixel,x+offsetx,y+offsety)
            else:
                p_set(x+offsetx,y+offsety,color_pixel[0]*rij[x],color_pixel[1]*rij[x],color_pixel[2]*rij[x])


def pixel(screen, color, x,y):
    pygame.draw.rect(screen, color , pygame.Rect(x*scale, y*scale, scale, scale))

def getbuienradar():
    global buienradar_data
    with urllib.request.urlopen('https://gpsgadget.buienradar.nl/data/raintext?lat=52.28&lon=5.53') as response:
        web_data = response.read()
    buienradar_data =  web_data.decode('utf-8').splitlines()
    print("Update buienradar.")


def draw_buienradar():
    global buienradar_data
    color_buienradar = (0,0,255)

    for y in range(7,10):
        for line in buienradar_data[:3]: #only first 3 lines = 15min 
            #bar = random.randint(0, 17) #sumulate result
            #bar = y
            bar = int(line[:3])/15 #max value from buienradar = 255, scale to 17 pixels 
    
            #draw bar
            for x in range(0,17):
                if mode == "artnet":
                    if x<bar:
                        p_set(x,y,color_buienradar[0],color_buienradar[1],color_buienradar[2])
                    else:
                        p_set(x,y,0,0,0) #Set black pixels
                else:
                    if x<bar:
                        pixel(screen, color_buienradar , x,y)

print("Starting artnet clock")

p_artnet = Artnet('10.42.4.155');
p_buffer = [0,0,0]*17*10

# for display in pygame
scale = 30 # enlarge pygame window to see pixels
color_background = (0,0,0)
color_pixel = (0,158,0)
color_werkplaats = (0,0,255)

## Set up MQTT stuff
## http://www.steves-internet-guide.com/python-mqtt-publish-subscribe/
client = mqtt.Client("ArtnetClock") 
client.on_message = on_message ## Bind function to callback
client.connect("server",1883)
client.subscribe("tkkrlab/werkplaats/state")

if mode == "pygame":
    pygame.init()
    screen = pygame.display.set_mode((17*scale, 10*scale))
    pygame.display.set_caption('ArtnetClock')

getbuienradar()

while True:
    
    if mode == "pygame":
        for event in pygame.event.get():
            if event.type==QUIT:
                pygame.quit()
                sys.exit()
        screen.fill(color_background)

    client.loop_start() #start loop to process received messages

    timenow = time.strftime("%H:%M:%S")

    # update once every 10 min
    if (timenow[4]=='0' and timenow[6:8] =='00'):
        #if (timenow[6:8] =='00'):
        getbuienradar()

    draw_buienradar()

    drawNumber(0, 2, timenow[0])
    drawNumber(4, 2, timenow[1])
    if (int(timenow[7]) % 2) == 0:
        drawNumber(7, 2, ':')
    else:
        drawNumber(7, 2, ':',(0,80,0))
    drawNumber(10, 2, timenow[3])
    drawNumber(14, 2, timenow[4])

    if mode == "pygame":
        pixel(screen, color_werkplaats , 16,9)
        pygame.display.update()
    else:
        p_set(16,9,color_werkplaats[0],color_werkplaats[1],color_werkplaats[2])
        send()

    time.sleep(1)

